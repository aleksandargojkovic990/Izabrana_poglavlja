@page "/unos-usluge"
@page "/unos-usluge/{sifraUsluge:int}"
@rendermode InteractiveAuto
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Unos usluge</PageTitle>

<h1>Unos usluge</h1>

<EditForm Model="usluga" OnValidSubmit="HandleSubmit" method="post" FormName="unosUsluge">
    <DataAnnotationsValidator />

    <div class="form-group col-md-3">
        <label>Šifra usluge:</label>
        <InputNumber @bind-Value="usluga.Sifra" class="form-control" disabled>
        </InputNumber>
    </div>

    <div class="form-group col-md-6">
        <label>Naziv<span class="text-danger">*</span>:</label>
        <InputText @bind-Value="usluga.Naziv" class="form-control">@usluga.Naziv</InputText>
        @if (!naziv)
        {
            <p class="text-danger">Naziv je obavezno polje.</p>
        }
    </div>

    <div class="form-group col-md-3">
        <label>Datum od<span class="text-danger">*</span>:</label>
        <InputDate @bind-Value="cenovnik.DatumOd" class="form-control">@cenovnik.DatumOd</InputDate>
        @if (!datumOd)
        {
            <p class="text-danger">Datum od je obavezno polje i mora biti veće od 01/01/1753.</p>
        }
    </div>

    <div class="form-group col-md-3">
        <label>Datum do:</label>
        <InputDate @bind-Value="cenovnik.DatumDo" class="form-control">@cenovnik.DatumDo</InputDate>
        @if (!datumDo)
        {
            <p class="text-danger">Datum do mora biti veće od 01/01/1753 i od datuma od.</p>
        }
    </div>

    <div class="form-group col-md-3">
        <label>Cena<span class="text-danger">*</span>:</label>
        <InputNumber @bind-Value="cenovnik.Cena" class="form-control">@cenovnik.Cena</InputNumber>
        @if (!cena)
        {
            <p class="text-danger">Cena je obavezno polje i mora biti veće od 0.</p>
        }
    </div>

    <div class="form-group">
        <button type="submit">Dodaj</button>
    </div>
</EditForm>

<div class="table-responsive mt-5">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Datum od</th>
                <th scope="col">Datum do</th>
                <th scope="col">Cena</th>
                <th scope="col">Operacija</th>
                <th scope="col">Akcija</th>
            </tr>
        </thead>
        <tbody>
            @if (cene.Count > 0)
            {
                @foreach (var c in cene)
                {
                    <tr>
                        <td>@c.DatumOd</td>
                        <td>@c.DatumDo</td>
                        <td>@c.Cena</td>
                        <td>@c.Action</td>
                        <td class="action-buttons">
                            <button type="button" class="m-0" @onclick="() => HandleUpdate(c)">Izmeni</button>
                            <button type="button" class="m-0" @onclick="() => HandleDelete(c)">Obriši</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<div>
    <button type="button" @onclick="() => HandleSave()">Sačuvaj</button>
</div>

@if (OpenModal)
{
    <Modal Message="@message" OnClose="@OnClose" ButtonTypes="Modal.ButtonTypesEnum.Ok"></Modal>
}

@code {
    [Parameter]
    public int SifraUsluge { get; set; }

    [SupplyParameterFromForm]
    private UslugaDTO usluga { get; set; } = new UslugaDTO();
    [SupplyParameterFromForm]
    private CenovnikDTO cenovnik { get; set; } = new CenovnikDTO();

    private List<CenovnikDTO> cene { get; set; } = new List<CenovnikDTO>();

    private bool OpenModal { get; set; }
    private string message;

    private bool isUpdate = false;
    private bool isCenovnikUpdate = false;

    // Validations
    private bool naziv = true;
    private bool datumOd = true;
    private bool datumDo = true;
    private bool cena = true;

    // Happens after form initialization
    protected override async Task OnInitializedAsync()
    {
        // Indicates that this page is an update page
        if (SifraUsluge > 0)
        {
            usluga = (await Http.GetFromJsonAsync<List<UslugaDTO>>($"api/Usluga/GetUsluge?sifra={SifraUsluge}")).First();
            cene = usluga.Cenovnici;
            isUpdate = true;
        }
        else
        {
            usluga.Cenovnici.Add(new CenovnikDTO());
            cenovnik = usluga.Cenovnici.First();
        }
    }

    // Happens after click on the submit button
    private void HandleSubmit()
    {
        // Validations
        naziv = !string.IsNullOrWhiteSpace(usluga.Naziv) ? true : false;
        datumOd = cenovnik.DatumOd >= DateTime.Parse("01.01.1753", CultureInfo.InvariantCulture)
            && cenovnik.DatumOd <= DateTime.MaxValue ? true : false;
        datumDo = (cenovnik.DatumDo >= DateTime.Parse("01.01.1753", CultureInfo.InvariantCulture)
            && cenovnik.DatumDo <= DateTime.MaxValue
            && cenovnik.DatumDo >= cenovnik.DatumOd) || cenovnik.DatumDo is null ? true : false;
        cena = cenovnik.Cena > 0 && cenovnik.Cena is not null ? true : false;

        bool valid = naziv && datumOd && datumDo && cena;

        // Checks if all fields are validated
        if (valid)
        {
            if (!isCenovnikUpdate)
            {
                cenovnik.Usluga = usluga;
                cenovnik.Action = Model.Action.Add;
                cene.Add(cenovnik);
            }
            else
            {
                cenovnik.Usluga = usluga;
                cenovnik.Action = !(cenovnik.Sifra > 0 && cenovnik.Sifra is not null) ? Model.Action.Add : Model.Action.Update;

                isCenovnikUpdate = false;
            }

            cenovnik = new CenovnikDTO();
        }
    }

    // Happens after click on the update button in the grid
    private void HandleUpdate(CenovnikDTO c)
    {
        cenovnik = c;
        isCenovnikUpdate = true;
    }

    // Happens after click on the delete button in the grid
    private void HandleDelete(CenovnikDTO c)
    {
        if (c.Sifra > 0 && c.Sifra is not null)
            c.Action = Model.Action.Delete;
        else
            cene.Remove(c);
    }

    // Happens after click on the save button
    private async Task HandleSave()
    {
        if (usluga.Cenovnici.Count > 0 && usluga.Cenovnici.First().Cena > -1)
        {
            cene.ForEach(c => c.Usluga = null);
            usluga.Cenovnici = cene;

            // Checks if form should add or update an object
            if (!isUpdate)
            {
                var response = (await Http.PostAsJsonAsync<UslugaDTO>("api/Usluga/AddUsluga", usluga));
                message = response.IsSuccessStatusCode || response.StatusCode == System.Net.HttpStatusCode.InternalServerError
                    ? await response.Content.ReadAsStringAsync() : "Usluga nije uneta.";

                // Clear the form
                if (response.IsSuccessStatusCode)
                {
                    cene = new List<CenovnikDTO>();
                    usluga = new UslugaDTO();
                    cenovnik = new CenovnikDTO();
                    usluga.Cenovnici.Add(cenovnik);
                }
            }
            else
            {
                var response = (await Http.PostAsJsonAsync<UslugaDTO>("api/Usluga/UpdateUsluga", usluga));
                message = response.IsSuccessStatusCode || response.StatusCode == System.Net.HttpStatusCode.InternalServerError
                    ? await response.Content.ReadAsStringAsync() : "Usluga nije ažurirana.";

                OpenModal = true;
            }
        }
        else
        {
            message = !isUpdate ? "Usluga nije uneta." : "Usluga nije ažurirana.";
            OpenModal = true;
        }
    }

    // Happens when the modal dialog is closed
    private void OnClose(bool decision)
    {
        OpenModal = false;

        // If it is an update page, after update redirect to pretraga-usluga
        if (isUpdate)
            Navigation.NavigateTo($"/pretraga-usluga/{usluga.Sifra}");
    }
}

